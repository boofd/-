ansible-playbook是日常应用中使用频率最高的命令,工作机制:通过读取先编写好的playbook文件实现批量管理,可以理解为按一定条件组成的ansible任务集

JSON简介
	JSON是JavaScript对象表示发,它是一种基于文本独立语言的轻量级数据交换格式
	JSON中的分隔符限于单引号 "'" 小括号 "()" 中括号 "[]" 大括号 "{}" 冒号 ":" 和逗号","
	JSON特性
	JSON是纯文本 纯数字需要加双引号引起来
	JSON具有"自我描述性"
	JSON具有层级结构(值中存在值) 可以数组套键值,键值中套数组
	JSON可通过JavaScript进行解析

JSON简介
	JSON语法规则
	数据在名称/值对中
	数据由逗号分隔
	大括号保存对象
	中括号保存数组

JSON数据的书写格式是:名称/值对
名称/值对包括字段名称(在双引号中),后面写一个冒号,然后是值,例如:"date":"1905"

JSon语法规则之数组
	{"诗人":
	  ["李白","杜甫","白居易","李贺"]}#整体是一个键值,诗人都有哪些

符合复杂类型
	{"诗人":
	  [{"李白":"诗仙","年代":"唐"},
	  [{"杜甫":"诗圣","年代":"唐"},
	  [{"白居易":"师魔","年代":"唐"},
	  [{"李贺":"师鬼","年代":"唐"}]
}
#键值中套数组,数组中再套键值

YAML基础语法
	YAML的结构通过空格来展示
	数组使用"- "来表示
	键值对使用":"来表示
	YAML使用一个固定的缩进风格表示数据层级结构关系
	一般每个缩进级别由两个以上空格组成
	#表示注释
注意:	不要使用tab键对齐
	同一级锁紧必须对齐
YAML的键值表示方法
	采用冒号分隔
	:后面必须有一个空格
	YAML键值对例子	"诗仙": "李白"

复杂YAML的键值对嵌套
	"useradd": 
	__"name": "dc"
	数组
	["李白","杜甫","白居易","李贺"]

YAML数组表示方法
	使用一个段横岗加一个空格
	YAML数组例子
	- "李白"
	- "杜甫"
	- "白居易"
	- "李贺"
	哈希数组复合表达式
	"诗人"
	__- "李白"
	__- "杜甫"
	__- "白居易"
	__- "李贺"
	高级复合表达式
________user
	-
          uname: nb
          grp: root
          pwd: dc
        - 
          uname: wk
          grp: adm
          pwd: banana
        - 
          uname: dd
          grp: root
          pwd: gao

playbook是什么
为什么要使用playbool
	执行一些简单的任务,使用ad-hoc命令可以方便的解决问题,但有时一个设施过于复杂,执行ad-hoc命令是不合适的,最好使用playbook
	playbook可以反复使用编写的代码,可以放到不同的机器上面,像函数一样,最大化的利用代码,在使用ansible过程中,处理的大部分操作都是在编写playbook

playbook语法格式
	playbook由YAML语言编写,遵循YAML标准
	在同一行中,#之后的内容表示注释
	在同一个列表中的元素应该保持相同的缩进
	playbook由一个或多个play组成
	play中hosts,variables,roles,tasks等对象的表示方法都是键值中间以":"分隔
	YAML还有一个怪癖,他的文件开始行都应该是---,这是YAML格式的一部分,表明一个文件的开始

playbook执行结果
	使用ansible-playbook运行playbook文件,输出内容为JSON格式,由不同颜色组成便于识别
	绿色代表执行成功
	***代表系统代表系统状态发生改变
	红色代表执行失败

	第一个playbook 
---
- hosts: all
  tasks:
  - ping:

测试所有主机是否可以ping 连接成功

用playbook给主机添加用户,并修改密码123,把用户添加到users组
---
- hosts: all
  tasks: 
    - user: 
        name: z3
        group: users
    - shell: echo 123 | passwd --stdin z3

用playbook给所有主机安装httpd,修改端口8080,设置默认主页内容启动服务,设置开机自启

---
- hosts: all
  tasks:
  - name: install the latest version of Apache
    yum:
      name: httpd
      state: installed
  - replace:
      path: /etc/httpd/conf/httpd.conf
      regexp: '80'
      replace: '80'
  - copy:
      src: /var/www/html/index.html
      dest: /var/www/html/
    - name: start web #启动服务
      service:
        name: httpd
        state: restarted
        enabled: yes

将变量添加到playbook,给主机添加用户l4,设置默认密码123
---
- hosts: all
  vars: 
    username: l4 #定义变量
  tasks: 
  - user: 
      name: "{{username}}"
  - shell: echo 123 | passwd --stdin "{{username}}"

变量过滤器password_hash,解决明文密码
---
- hosts: db
  vars: 
    un: gao
  tasks:
  - user:
      password={{'123qqq.A'|password_hash('sha512')}} name="{{un}}"

ansible-playbook对错误的处理
	默认情况判断$?,如果值不为0就停止执行
	但某些情况我们需要忽略错误继续执行
	例如创建缓存目录,然后重启apache
	
---
- hosts: cache
  tasks: 
    - shell: mkdir /tmp/cache
      ignore_errors:True  ##忽略错误,继续后面的任务
    - service: 
        name: httpd
        state: restarted

tags:给指定的任务定义一个调用标识,handlers达到触发条件后实现接下来的命令
 修改本地httpd文件后,执行playbook脚本中的tags标记后,触发handlers实现重启服务
 ---
- hosts: web
  tasks:
  - name: install the latest version of Apache
    yum:
      name: httpd
      state: installed
  - replace:
      path: /etc/httpd/conf/httpd.conf
      regexp: '8080'
      replace: '80'
  - copy:
      src: /etc/httpd/conf/httpd.conf
      dest: /etc/httpd/conf/
    tags: webconf
    notify:
      - restart webi ##handler段的name定义的串,必须一致,否则达不到触发的效果
  handlers:
    - name: restart web
      service:
        name: httpd
        state: restarted
调用标记	ansible-playbook test.yml -t webconf

when 有些时候在满足特定的条件后在触发某一想操作,或在特定的条件下终止某个行为,这个时候需要进行条件判断,when正是解决这个问题的最佳选择
register 有时候需要判断前一个命令的执行结果去处理后面的操作,这时候就需要register模块来保存前一个命令的返回状态,在后面进行调用


用when带入playbook完成当cpu超过0.7功耗就关闭http

---
- hosts: web
  tasks:
    - shell: uptime | awk '{printf("%.2f",$10)}'
      register: bl
    - service:
        name: httpd
        state: stopped
      when: bl.stdout|float > 0.2

whith_items是playbook标准循环,可以用于迭代一个列表或字典,通过{{item}}获取每次迭代的值

使用playbook创建多个用户,放入所属组,并设置不同的密码
- hosts: db
  tasks:
    - user:
        name: "{{item.uname}}"
        group: "{{item.grp}}"
        password: "{{item.pwd|password_hash('sha512')}}"
      with_items:
        -
          uname: nb
          grp: root
          pwd: dc
        - 
          uname: wk
          grp: adm
          pwd: banana
        - 
          uname: dd
          grp: root
          pwd: gao
        - 
          uname: jj
          grp: root
          pwd: a

